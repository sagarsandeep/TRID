// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TRID.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("ClosingDisclosure", SourceFile="FeatureFiles\\ClosingDisclosure.feature", SourceLine=0)]
    public partial class ClosingDisclosureFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ClosingDisclosure.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ClosingDisclosure", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void ValidatingLoanDetailsOnClosingDisclosurePage(string url, string sheetName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LoanDetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validating Loan Details on Closing Disclosure page", @__tags);
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
testRunner.Given(string.Format("user is at TRID application homepage with {0}", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.And("user navigate to Closing Disclosure Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 7
 testRunner.And(string.Format("user have all the input values from Excel sheet {0}", sheetName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
testRunner.When("Calculation Method is 30 Over 360", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.And("loan type is fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("Frequency of Payments is Monthly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("Loan Term is Months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("Repayment Term Type is Regular P And I - Whole Term", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("Enter Loan detail input values for computation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("click on Loan Details TEST on Closing Disclosure page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.And("click on Disclosure TEST on Closing Disclosure page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
testRunner.Then("Updated Principal and Interest value should display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 17
 testRunner.And("Updated Prepaid Charges should display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("Updated Amount Financed should display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validating Loan Details on Closing Disclosure page, httP://thrive-app.azurewebsit" +
            "es.net/Index_Dev.html?tKey=EB535076-2140-4106-8CAE-B230F6E2D082&aKey=TRID", new string[] {
                "LoanDetails"}, SourceLine=23)]
        public virtual void ValidatingLoanDetailsOnClosingDisclosurePage_HttPThrive_App_Azurewebsites_NetIndex_Dev_HtmlTKeyEB535076_2140_4106_8CAE_B230F6E2D082AKeyTRID()
        {
            this.ValidatingLoanDetailsOnClosingDisclosurePage("httP://thrive-app.azurewebsites.net/Index_Dev.html?tKey=EB535076-2140-4106-8CAE-B" +
                    "230F6E2D082&aKey=TRID", "ClosingDisclosure", ((string[])(null)));
#line hidden
        }
        
        public virtual void ValidatingLoanDetailsOnLoanEstimatePage(string url, string sheetName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LoanDetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validating Loan Details on Loan Estimate Page", @__tags);
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
testRunner.Given(string.Format("user is at TRID application homepage with {0}", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 31
 testRunner.And("user navigate to Loan Estimate Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 32
 testRunner.And(string.Format("user have all the input values from Excel sheet {0}", sheetName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 33
testRunner.When("Calculation Method is 30 Over 360", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.And("loan type is fixed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("Frequency of Payments is Monthly", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And("Loan Term is Months", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.And("Repayment Term Type is Regular P And I - Whole Term", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 38
 testRunner.And("Enter Loan detail input values for computation", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("click on Loan Details TEST on Loan Estimate Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("click on Disclosure TEST on Loan Estimate Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
testRunner.Then("Updated in 5 Years value should display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 42
 testRunner.Then("Updated in 5 Years principal should display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.And("updated APR value should display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
 testRunner.And("Updated TIP value should display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validating Loan Details on Loan Estimate Page, httP://thrive-app.azurewebsites.ne" +
            "t/Index_Dev.html?tKey=EB535076-2140-4106-8CAE-B230F6E2D082&aKey=TRID", new string[] {
                "LoanDetails"}, SourceLine=46)]
        public virtual void ValidatingLoanDetailsOnLoanEstimatePage_HttPThrive_App_Azurewebsites_NetIndex_Dev_HtmlTKeyEB535076_2140_4106_8CAE_B230F6E2D082AKeyTRID()
        {
            this.ValidatingLoanDetailsOnLoanEstimatePage("httP://thrive-app.azurewebsites.net/Index_Dev.html?tKey=EB535076-2140-4106-8CAE-B" +
                    "230F6E2D082&aKey=TRID", "LoanEstimate", ((string[])(null)));
#line hidden
        }
        
        public virtual void ValidatingPMIOnMortgageInsruancePage(string url, string sheetName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "LoanDetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validating PMI on Mortgage Insruance page", @__tags);
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
testRunner.Given(string.Format("user is at TRID application homepage with {0}", url), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 53
 testRunner.And("user navigate to Mortgage Insruance page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 54
 testRunner.And(string.Format("user have all the input values from Excel sheet {0}", sheetName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 55
testRunner.When("Add Pmi Rate", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 56
testRunner.Then("Updated PMI value should display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 57
 testRunner.And("updated Total Period Payment should display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.And("updated APR value should display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
 testRunner.And("Updated Amount Financed should display", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Validating PMI on Mortgage Insruance page, httP://thrive-app.azurewebsites.net/In" +
            "dex_Dev.html?tKey=EB535076-2140-4106-8CAE-B230F6E2D082&aKey=TRID", new string[] {
                "LoanDetails"}, SourceLine=61)]
        public virtual void ValidatingPMIOnMortgageInsruancePage_HttPThrive_App_Azurewebsites_NetIndex_Dev_HtmlTKeyEB535076_2140_4106_8CAE_B230F6E2D082AKeyTRID()
        {
            this.ValidatingPMIOnMortgageInsruancePage("httP://thrive-app.azurewebsites.net/Index_Dev.html?tKey=EB535076-2140-4106-8CAE-B" +
                    "230F6E2D082&aKey=TRID", "MortgageInsurance", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
