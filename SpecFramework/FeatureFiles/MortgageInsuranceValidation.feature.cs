// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TRID.FeatureFiles
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("MortgageInsuranceValidation", SourceFile="FeatureFiles\\MortgageInsuranceValidation.feature", SourceLine=0)]
    public partial class MortgageInsuranceValidationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MortgageInsuranceValidation.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "MortgageInsuranceValidation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void EnterPMIRateDataInMortgageInsurancePage(string scenarioNo, string sheetName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "MortgageInsurance",
                    "GiveInput"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Enter PMI rate data in Mortgage Insurance Page", @__tags);
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
testRunner.Given("user launches TRID application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.And("user navigates to Mortgage Insurance Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And(string.Format("user have the input values from excel sheet {0} for scenario {1}", sheetName, scenarioNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
testRunner.When("user enters pmi rate values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
testRunner.Then("Pmi Rates Grid should have inserted values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Enter PMI rate data in Mortgage Insurance Page, 1", new string[] {
                "MortgageInsurance",
                "GiveInput"}, SourceLine=15)]
        public virtual void EnterPMIRateDataInMortgageInsurancePage_1()
        {
            this.EnterPMIRateDataInMortgageInsurancePage("1", "MortgageInsurance", ((string[])(null)));
#line hidden
        }
        
        public virtual void SetValueLesserThanDefaultValueForLowerOfCostOrAppraisalInMortgageInsurancePage(string scenarioNo, string defaultValue, string inputValue, string computedDate, string sheetName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "MortgageInsurance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set value lesser than default value for lower of cost or appraisal in Mortgage In" +
                    "surance Page", @__tags);
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
testRunner.Given("user launches TRID application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
 testRunner.And("user navigates to Mortgage Insurance Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.And(string.Format("user have the input values from excel sheet {0} for scenario {1}", sheetName, scenarioNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
testRunner.When("user enters pmi rate values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 25
 testRunner.And(string.Format("user enters {0} lesser than default value for lower of cost or appraisal", inputValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("click on Other PMI inputs TEST Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
testRunner.Then(string.Format("Payment Schedule is recalculated with new lower of cost value {0}", inputValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 28
 testRunner.And(string.Format("Drop off years for PMI changes to {0}", computedDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Set value lesser than default value for lower of cost or appraisal in Mortgage In" +
            "surance Page, Variant 0", new string[] {
                "MortgageInsurance"}, SourceLine=30)]
        public virtual void SetValueLesserThanDefaultValueForLowerOfCostOrAppraisalInMortgageInsurancePage_Variant0()
        {
            this.SetValueLesserThanDefaultValueForLowerOfCostOrAppraisalInMortgageInsurancePage("1", "155000", "131189", "3/1/2016", "MortgageInsurance", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Set value lesser than default value for lower of cost or appraisal in Mortgage In" +
            "surance Page, Variant 1", new string[] {
                "MortgageInsurance"}, SourceLine=30)]
        public virtual void SetValueLesserThanDefaultValueForLowerOfCostOrAppraisalInMortgageInsurancePage_Variant1()
        {
            this.SetValueLesserThanDefaultValueForLowerOfCostOrAppraisalInMortgageInsurancePage("1", "155000", "131188", "3/1/2016", "MortgageInsurance", ((string[])(null)));
#line hidden
        }
        
        public virtual void SetValueGreaterThanDefaultValueForLowerOfCostOrAppraisalInMortgageInsurancePage(string scenarioNo, string defaultValue, string inputValue, string computedDate, string sheetName, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "MortgageInsurance"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set value greater than default value for lower of cost or appraisal in Mortgage I" +
                    "nsurance Page", @__tags);
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
testRunner.Given("user launches TRID application", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 39
 testRunner.And("user navigates to Mortgage Insurance Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And(string.Format("user have the input values from excel sheet {0} for scenario {1}", sheetName, scenarioNo), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
testRunner.When("user enters pmi rate values", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.And(string.Format("user enters {0} greater than default value for lower of cost or appraisal", inputValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 43
 testRunner.And("click on Other PMI inputs TEST Button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
testRunner.Then(string.Format("Payment Schedule is recalculated with new lower of cost value {0}", inputValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 45
 testRunner.And(string.Format("Drop off years for PMI changes to {0}", computedDate), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Set value greater than default value for lower of cost or appraisal in Mortgage I" +
            "nsurance Page, Variant 0", new string[] {
                "MortgageInsurance"}, SourceLine=47)]
        public virtual void SetValueGreaterThanDefaultValueForLowerOfCostOrAppraisalInMortgageInsurancePage_Variant0()
        {
            this.SetValueGreaterThanDefaultValueForLowerOfCostOrAppraisalInMortgageInsurancePage("1", "155000", "164860", "3/1/2016", "MortgageInsurance", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Set value greater than default value for lower of cost or appraisal in Mortgage I" +
            "nsurance Page, Variant 1", new string[] {
                "MortgageInsurance"}, SourceLine=47)]
        public virtual void SetValueGreaterThanDefaultValueForLowerOfCostOrAppraisalInMortgageInsurancePage_Variant1()
        {
            this.SetValueGreaterThanDefaultValueForLowerOfCostOrAppraisalInMortgageInsurancePage("1", "155000", "164861", "3/1/2016", "MortgageInsurance", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
